#!/bin/bash

# Read file Readme.md and generate and run test case from the list of
# spectrums. Test result are written to a directory rundir-YYMMDDhhmmss.

cd $(dirname "$0")
rundir=rundir-$(date +%Y%m%d%H%M%S)
mkdir $rundir
echo $'\e[36m'Running tests in $rundir$'\e[m'

num_tests=0
num_aborted=0
num_ok=0
num_failed=0

# Run a test: create the julia script to write pcm and run asa-s16le on the
# generated audio and binary-compare the resulting spectrum data file with
# xxd and diff. Return 0 if equal or 1 if not equal.
runtest() {
  ((num_tests++))

  echo -n "Test $file: "
  if [[ ! -r $file ]]; then
    echo $'\e[35m'Not run$'\e[m' "$file missing, aborting test case"
    ((num_aborted++))
    return 1;
  fi

  genwaves=$rundir/$file-genwaves.jl
  cat > $genwaves <<-EOT
		#!/usr/bin/env julia

		# Autogenerated by run.sh for $file
		# $(date)

		# Default settings, will be overwritten by inserted parameters below
		import Random
		Random.seed!(0)
		r = () -> rand()
		n = 2048
		bias = 0
		noise_amplitude = 0
		periods = [3]
		amplitudes = [1]
	
		# Inserted parameters for $file $params
		# End of parameters

		# f() is expected to return values in range [-1, 1]
		function f(x :: Number)
		  noise = 2 * noise_amplitude * r() - noise_amplitude
		  wave = sum(sin.(2 .* pi .* float(x) ./ float(periods)) .* amplitudes)

		  y0 = noise + wave + bias
		  amplitude = noise_amplitude + sum(amplitudes) + bias
		  @assert abs(y0) <= amplitude 
		  y0 / amplitude # return such that -1 <= y <= 1
		end

		max = typemax(Int16)
		for x in 0:n - 1
		  y = floor(f(x) * max)
		  y = Int16(y)

		  try
		     write(stdout, y)
		  catch ex
		    println(stderr, ex)
		    exit(1)
		  end
		end
	EOT

  chmod u+x $genwaves
  $genwaves > $rundir/$file.pcm
  ASA_DBG=D eval $asa $rundir/$file.pcm $rundir/$file 2> $rundir/$file.log
  diff <(xxd $file) <(xxd $rundir/$file) > $rundir/$file.diff
  result=$?

  if [[ $result == 0 ]]; then 
    echo $'\e[32m'OK$'\e[m'
    ((num_ok++))
  else
    echo $'\e[31m'Failed$'\e[m' "see $file.log and $file.diff in $rundir"
    ((num_failed++))
  fi
  return $result
}


file=
mode=
IFS=$'\r\n'
for line in $(<Readme.md); do
  case "$line" in
  
  genwaves)
    mode=params
    params=
  ;;

  asa-s16le*)
    mode=
    asa=../../$line
  ;;

  "## spectrum-"*)
    mode=
    if [[ -n $file ]] ; then runtest; fi
    file=${line#'## '}
  ;;

  esac

  if [[ $mode == params && $line != genwaves ]]; then
    params="$params"$'\n'"$line"
  fi

done
if [[ -n $file ]] ; then runtest; fi

echo
echo $'\e[36mTest completed!\e[m' Test data available in $rundir
echo "Tests "$'\e[33m'"ran:    " $num_tests$'\e[m'
echo "Tests "$'\e[32m'"ok:     " $num_ok$'\e[m'
echo "Tests "$'\e[31m'"failed: " $num_failed$'\e[m'
echo "Tests "$'\e[35m'"aborted:" $num_aborted$'\e[m'
